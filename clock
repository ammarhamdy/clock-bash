#!/bin/bash
## clock command shows the current time and works as a timer or stopwatch.
## args:-
## stopwatch: works as a stopwatch, countdown the time second by second.
## timer: works as a timer, count down the time second by second.


## helper functions:
play_sound(){
	while [[ $tin_ton > 0 ]]
	do
		for i in {1..3}
		do
			echo -ne "\a\a\a"
			sleep .125
		done
		((tin_ton--))
		sleep .5
	done
	echo -e "\n\n"
}


## functions:
shows_the_time(){
	date +"%T"
}


timer(){
	read_tin_ton_numbers(){
		# number of ring tone should repeat.
		lines_counter=0
		while true
		do
			read -p "tin ton numbers: " tin_ton
			((lines_counter++))
			if [[ $tin_ton > 0 && $tin_ton < 99 ]];
			then
				break
			fi
		done
	}
	read_hours(){
		while true
		do
			read -p "hours: " hours
			((lines_counter++))
			if [[ "$hours" =~ ^[0-9]{1,2}$ && "$hours" < 96 ]];
			then
				break
			fi
		done
	}
	read_minutes(){
		while true
		do
			read -p "minutes: " minutes
			((lines_counter++))
			if [[ "$minutes" =~ ^[0-9]{1,2}$ && "$minutes" < 60 ]];
			then
				break
			fi
		done
	}
	read_seconds(){
		while true
		do
			read -p "seconds: " seconds
			((lines_counter++))
			if [[ "$seconds" =~ ^[0-9]{1,2}$ && "$seconds" < 60 ]];
			then
				break
			fi
		done
	}
	print_the_time(){
		#echo -en "\033[8D" #Move the cursor backward 8 characters
		echo -en "\r" #Move the cursor to the beginning of line
		echo -en "\033[0;32m$hours"
		echo -en "\033[0;34m:"
		echo -en "\033[0;32m$minutes"
		echo -en "\033[0;34m:"
		echo -en "\033[0;32m$seconds"
		if [[ $hours < 10 ]]; 
		then
			echo -n " "
		fi
		if [[ $minutes < 10 ]];
		then
			echo -n " "
		fi 
		if [[ $seconds < 10 ]];
		then
			echo -n " "
		fi
	}
	clear_lines(){
		lines=$lines_counter
		while [[ $lines > 0 ]]
		do
			echo -en "\033[1A\033[K"
			((lines--))
		done
	}
	start(){
		while true
		do
			if (( $seconds == 0 ));
			then
				if (( $minutes == 0 ));
				then
					if ((hours == 0 ));
					then
						play_sound
						break
					else
						hours=$((hours-1))
						minutes=59
					fi
				else
					minutes=$((minutes-1))
					seconds=59
				fi
			else
				sleep 1
				seconds=$((seconds-1))
			fi
			print_the_time
		done
	}
	read_tin_ton_numbers
	read_hours
	read_minutes
	read_seconds
	clear_lines
	start
}


stop_watch(){
	init_stop_watch(){
		hours=0
		minutes=0
		seconds=0
	}
	print_the_time(){
		#echo -en "\033[8D" #Move the cursor backward 8 characters
		echo -en "\r" #Move the cursor to the beginning of line
		echo -en "\033[0;32m$hours"
		echo -en "\033[0;34m:"
		echo -en "\033[0;32m$minutes"
		echo -en "\033[0;34m:"
		echo -en "\033[0;32m$seconds"
		if [[ $hours < 10 ]]; 
		then
			echo -n " "
		fi
		if [[ $minutes < 10 ]];
		then
			echo -n " "
		fi 
		if [[ $seconds < 10 ]];
		then
			echo -n " "
		fi
	}
	start(){
		while true
		do
			sleep 1
			((seconds++))
			if [[ $seconds == 59 ]];
			then
				((minutes++))
				seconds=0
				if [[ $minutes == 59 ]];
				then
					((hours++))
					minutes=0
				fi
			fi
			print_the_time
		done
	}
	init_stop_watch
	start
}


alarm(){
	echo ""
}


help_message(){
echo "Usage: clock [args]
	clock command shows the current time and works as a timer or stopwatch.
args:
	stopwatch			start to count seconds.
	timer				counts the time down.
"
}


## main function:
main(){
	case $arg1 in
		"stopwatch")
			stop_watch;;
		"timer")
			timer;;
		"")
			shows_the_time;;
		*)
			help_message;;	
	esac
}


## run:
arg1=$1
main




